---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  app.kubernetes.io/component: app
  app.kubernetes.io/instance: "pcd-rls-${ENVIRONMENT}"
  app.kubernetes.io/managed-by: kubectl
  app.kubernetes.io/name: nodejs
  app.kubernetes.io/part-of: "pcd-rls-${ENVIRONMENT}"
  app: "pcd-rls-${ENVIRONMENT}"
  template: "pcd-rls-app-dc-uat-template"
metadata:
  name: "pcd-rls-app-dc-uat"
objects:
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "allow-${REPO_NAME}-app-${ENVIRONMENT}-to-patroni-master-cluster"
    spec:
      # Allow app to talk to Patroni cluster
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: "${REPO_NAME}-${ENVIRONMENT}"
                  deploymentconfig: "${REPO_NAME}-app-${ENVIRONMENT}"
                  role: app
          ports:
            - port: 5432
              protocol: TCP
      podSelector:
        matchLabels:
          cluster-name: "master"
          statefulset: "patroni-master"
          role: master
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: "allow-${REPO_NAME}-${ENVIRONMENT}-pre-hook-to-patroni-master-cluster"
    spec:
      # Allow app pre-hook pods to talk to Patroni cluster
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  openshift.io/deployer-pod.type: hook-pre
          ports:
            - port: 5432
              protocol: TCP
      podSelector:
        matchLabels:
          cluster-name: "master"
          statefulset: "patroni-master"
          role: master
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"StatefulSet","name":"patroni-master"}]'
      name: "${REPO_NAME}-app-${ENVIRONMENT}"
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        app: "${REPO_NAME}-${ENVIRONMENT}"
        deploymentconfig: "${REPO_NAME}-app-${ENVIRONMENT}"
        role: app
      strategy:
        type: Rolling
        resources: {}
        rollingParams:
          timeoutSeconds: 600
          pre:
            failurePolicy: Retry
            execNewPod:
              command:
                - npm
                - run
                - migrate
              containerName: "app"
              env:
                - name: NODE_ENV
                  value: production
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-rls-uat-db-name
                      name: "patroni-master-secret"
                - name: DB_HOST
                  value: "patroni-master"
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: "patroni-master-secret"
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: "patroni-master-secret"
                - name: SERVER_BASEPATH
                  value: "${ROUTE_PATH}"
      template:
        metadata:
          labels:
            app: "${REPO_NAME}-${ENVIRONMENT}"
            deploymentconfig: "${REPO_NAME}-app-${ENVIRONMENT}"
            role: app
        spec:
          containers:
            - name: app
              image: "${IMAGE_REGISTRY}/${IMAGE_NAMESPACE}/${REPO_NAME}:${IMAGE_TAG}"
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: "${ROUTE_PATH}/api"
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: "${ROUTE_PATH}/api"
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 3
                failureThreshold: 1
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              env:
                - name: NODE_ENV
                  value: production
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-rls-uat-db-name
                      name: "patroni-master-secret"
                - name: DB_HOST
                  value: "patroni-master"
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: "patroni-master-secret"
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: "patroni-master-secret"
                - name: FRONTEND_BASEPATH
                  value: "${ROUTE_PATH}"
                - name: VITE_FRONTEND_BASEPATH
                  value: "${ROUTE_PATH}"
                - name: VITE_CONTACT
                  valueFrom:
                    secretKeyRef:
                      key: email
                      name: "${REPO_NAME}-contact-secret"

                - name: VITE_HOWTOURL
                  valueFrom:
                    secretKeyRef:
                      key: howtovideourl
                      name: "${APP_NAME}-landingpagevideourls-secret"
                - name: VITE_CHEFSTOURURL
                  valueFrom:
                    secretKeyRef:
                      key: chefstourvideourl
                      name: "${APP_NAME}-landingpagevideourls-secret"
                - name: VITE_CHEFS_GEO_ADDRESS_APIURL
                  valueFrom:
                    secretKeyRef:
                      key: chefsgeoaddressapiurl
                      name: "${APP_NAME}-bcgeoaddress-secret"
                - name: VITE_CHEFS_ADVANCE_GEO_ADDRESS_APIURL
                  valueFrom:
                    secretKeyRef:
                      key: chefsadvancegeoaddressapiurl
                      name: "${APP_NAME}-bcgeoaddress-secret"
                - name: VITE_BC_GEO_ADDRESS_APIURL
                  valueFrom:
                    secretKeyRef:
                      key: bcgeoaddressapiurl
                      name: "${APP_NAME}-bcgeoaddress-secret"
                - name: SERVER_BASEPATH
                  value: "${ROUTE_PATH}"
                - name: SC_CS_CHES_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: ches_client_id
                      name: "${APP_NAME}-sc-cs-secret"
                - name: SC_CS_CHES_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ches_client_secret
                      name: "${APP_NAME}-sc-cs-secret"
                - name: SC_CS_CDOGS_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: cdogs_client_id
                      name: "${APP_NAME}-sc-cs-secret"
                - name: SC_CS_CDOGS_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: cdogs_client_secret
                      name: "${APP_NAME}-sc-cs-secret"
                - name: FILES_OBJECTSTORAGE_ACCESSKEYID
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: "${APP_NAME}-objectstorage-secret"
                - name: FILES_OBJECTSTORAGE_SECRETACCESSKEY
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: "${APP_NAME}-objectstorage-secret"
                - name: APITOKEN
                  valueFrom:
                    secretKeyRef:
                      key: mailapitoken
                      name: "chefs-master-secret"
                - name: WEBHOOK_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: webhooksecret
                      name: "${REPO_NAME}-${ENVIRONMENT}-secret"
                - name: EXTERNAL_API_KEY
                  valueFrom:
                    secretKeyRef:
                      key: externalapikey
                      name: "${REPO_NAME}-${ENVIRONMENT}-secret"
                # - name: SERVER_LOGFILE
                #   value: "/var/log/app.log"
              envFrom:
                - configMapRef:
                    name: "${REPO_NAME}-frontend-config"
                - configMapRef:
                    name: "${APP_NAME}-sc-config"
                - configMapRef:
                    name: "${REPO_NAME}-${ENVIRONMENT}-server-config"
                - configMapRef:
                    name: "${REPO_NAME}-${ENVIRONMENT}-service-config"
                - configMapRef:
                    name: "${APP_NAME}-files-config"
                - configMapRef:
                    name: "${REPO_NAME}-oidc-config"
                - configMapRef:
                    name: "${APP_NAME}-custombcaddressformiocomponent-config"
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            - name: log-storage
              emptyDir: {}
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - app
            from:
              kind: ImageStreamTag
              name: "${REPO_NAME}:${ENVIRONMENT}"
              namespace: "${NAMESPACE}"
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      name: "${REPO_NAME}-app-${ENVIRONMENT}"
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: "${REPO_NAME}-${ENVIRONMENT}"
        deploymentconfig: "${REPO_NAME}-app-${ENVIRONMENT}"
        role: app
      sessionAffinity: None
parameters:
  - name: APP_NAME
    description: Application name
    displayName: Application name
    required: true
  - name: ENVIRONMENT
    description: Environment identifier (i.e. 'dev' OR 'test' OR 'prod')
    displayName: Environment
    required: true
  - name: ROUTE_PATH
    description: Configure the route path (ex. /pr-5 or /app), also used for VITE_FRONTEND_BASEPATH
    displayName: Route path
    required: true
  - name: IMAGE_REGISTRY
    description: The container registry
    displayName: Docker Image Registry
    required: true
    value: ghcr.io
  - name: IMAGE_NAMESPACE
    description: The image namespace
    displayName: Docker Image Namespace
    required: true
    value: bcgov
  - name: IMAGE_TAG
    description: The specific image tag to deploy
    displayName: Docker Image Tag
    required: true
    value: dev
  - name: NAMESPACE
    description: Target namespace reference (i.e. 'wfezkf-dev')
    displayName: Target Namespace
    required: true
  - name: REPO_NAME
    description: Application repository name
    displayName: Repository Name
    required: true
    value: pcd-rls
  - name: CPU_LIMIT
    description: Limit Peak CPU per pod (in millicores ex. 1000m)
    displayName: CPU Limit
    value: 250m
  - name: CPU_REQUEST
    description: Requested CPU per pod (in millicores ex. 500m)
    displayName: CPU Request
    value: 50m
  - name: MEMORY_LIMIT
    description: Limit Peak Memory per pod (in gigabytes Gi or megabytes Mi ex. 2Gi)
    displayName: Memory Limit
    value: 1Gi
  - name: MEMORY_REQUEST
    description: Requested Memory per pod (in gigabytes Gi or megabytes Mi ex. 500Mi)
    displayName: Memory Request
    value: 256Mi
  - name: REPLICAS
    description: The number of replicas to run
    displayName: Replicas
    value: "2"
